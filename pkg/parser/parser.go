// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/casbin-mesh/neo/pkg/expression/ast"
)

func setScannerData(yylex interface{}, data interface{}) {
	yylex.(*Lexer).parseResult = data
}

//line parser.y:13
type yySymType struct {
	yys   int
	i     int
	f     float64
	b     bool
	s     string
	op    ast.Op
	expr  ast.Evaluable
	exprs []ast.Evaluable
	empty struct{}
	error *ast.Error
}

const INC_OP = 57346
const DEC_OP = 57347
const LEFT_OP = 57348
const RIGHT_OP = 57349
const LE_OP = 57350
const GE_OP = 57351
const EQ_OP = 57352
const NE_OP = 57353
const RE_OP = 57354
const NR_OP = 57355
const AND_OP = 57356
const OR_OP = 57357
const NULL_OP = 57358
const EXP_OP = 57359
const IN_OP = 57360
const INT = 57361
const FLOAT = 57362
const BOOLEAN = 57363
const STRING_LITERAL = 57364
const IDENTIFIER = 57365

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INC_OP",
	"DEC_OP",
	"LEFT_OP",
	"RIGHT_OP",
	"LE_OP",
	"GE_OP",
	"EQ_OP",
	"NE_OP",
	"RE_OP",
	"NR_OP",
	"AND_OP",
	"OR_OP",
	"NULL_OP",
	"EXP_OP",
	"IN_OP",
	"INT",
	"FLOAT",
	"BOOLEAN",
	"STRING_LITERAL",
	"IDENTIFIER",
	"','",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'&'",
	"'*'",
	"'+'",
	"'-'",
	"'~'",
	"'!'",
	"'/'",
	"'%'",
	"'<'",
	"'>'",
	"'^'",
	"'|'",
	"'?'",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:202

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	24, 7,
	26, 7,
	-2, 0,
	-1, 76,
	24, 20,
	28, 20,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 460

var yyAct = [...]uint8{
	3, 10, 2, 9, 143, 12, 13, 15, 8, 7,
	140, 36, 65, 66, 14, 55, 56, 138, 38, 41,
	42, 6, 62, 39, 40, 71, 144, 69, 70, 38,
	72, 73, 84, 85, 39, 40, 57, 11, 37, 135,
	89, 146, 63, 64, 74, 145, 91, 92, 93, 97,
	99, 100, 101, 102, 53, 109, 94, 96, 87, 114,
	113, 67, 68, 110, 112, 136, 1, 137, 119, 120,
	121, 122, 123, 21, 124, 125, 111, 134, 132, 128,
	129, 130, 131, 16, 126, 127, 103, 105, 106, 107,
	46, 47, 48, 49, 50, 51, 115, 116, 117, 118,
	43, 28, 80, 81, 82, 53, 17, 54, 58, 59,
	60, 61, 4, 38, 41, 42, 83, 133, 39, 40,
	44, 45, 20, 0, 52, 142, 46, 47, 48, 49,
	50, 51, 0, 0, 0, 0, 43, 0, 0, 147,
	0, 148, 149, 150, 151, 0, 0, 152, 0, 38,
	41, 42, 0, 0, 39, 40, 44, 45, 0, 0,
	52, 141, 46, 47, 48, 49, 50, 51, 0, 0,
	0, 0, 43, 0, 46, 47, 48, 49, 50, 51,
	0, 0, 139, 0, 43, 38, 41, 42, 0, 0,
	39, 40, 44, 45, 0, 0, 52, 38, 41, 42,
	78, 79, 39, 40, 44, 45, 0, 0, 52, 46,
	47, 48, 49, 50, 51, 0, 0, 0, 0, 43,
	0, 75, 0, 76, 5, 77, 18, 19, 0, 0,
	0, 0, 38, 41, 42, 0, 0, 39, 40, 44,
	45, 32, 33, 31, 35, 34, 0, 29, 95, 30,
	18, 19, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 32, 33, 31, 35, 34,
	0, 29, 98, 30, 18, 19, 22, 23, 24, 25,
	26, 27, 0, 0, 0, 0, 0, 0, 0, 32,
	33, 31, 35, 34, 0, 29, 104, 30, 18, 19,
	22, 23, 24, 25, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 32, 33, 31, 35, 34, 0, 29,
	88, 30, 18, 19, 22, 23, 24, 25, 26, 27,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 31,
	35, 34, 0, 29, 108, 30, 18, 19, 22, 23,
	24, 25, 26, 27, 0, 0, 0, 0, 0, 0,
	0, 32, 33, 31, 35, 34, 0, 29, 90, 30,
	18, 19, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 32, 33, 31, 35, 34,
	0, 29, 86, 30, 18, 19, 22, 23, 24, 25,
	26, 27, 0, 0, 0, 0, 0, 0, 0, 32,
	33, 31, 35, 34, 0, 29, 0, 30, 18, 19,
	22, 23, 24, 25, 26, 27, 0, 0, 46, 47,
	0, 0, 0, 32, 33, 31, 35, 34, 43, 29,
	0, 30, 0, 0, 22, 23, 24, 25, 26, 27,
	0, 38, 41, 42, 0, 0, 39, 40, 44, 45,
}

var yyPact = [...]int16{
	222, -1000, -1000, -1000, -4, 166, 91, -26, -24, 6,
	98, 4, 55, -5, -6, -1000, 27, 196, 414, 414,
	414, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 222,
	390, -1000, -1000, -1000, -1000, -1000, 318, 366, 414, 414,
	414, 246, 246, 270, 270, 270, 270, 270, 294, 294,
	294, 294, 342, 318, 318, 318, 318, 318, 294, 294,
	294, 294, 270, 270, 270, 270, 270, 270, 270, 246,
	246, 414, 414, 414, 414, 222, 222, 16, -1000, -1000,
	-1000, -1000, -1000, 41, -1000, -11, 154, 40, 201, -33,
	118, -1000, -1000, -1000, -6, -2, -6, 55, -13, 55,
	55, 55, 55, 4, 420, 4, 4, 4, 82, -39,
	-26, 40, -24, 6, 98, 4, 4, 4, 4, 55,
	55, 55, 55, 55, -5, -5, -6, -6, -1000, -1000,
	-1000, -1000, 0, 17, -1000, -1000, 222, -1000, -1000, -1000,
	222, 222, 222, 222, -1000, -1000, 222, -1000, -1000, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 122, 117, 116, 2, 0, 112, 21, 9, 8,
	3, 1, 37, 5, 6, 14, 7, 83, 106, 101,
	73, 66,
}

var yyR1 = [...]int8{
	0, 21, 19, 19, 19, 19, 19, 3, 3, 3,
	20, 20, 20, 20, 18, 18, 18, 18, 18, 18,
	2, 2, 2, 17, 17, 17, 17, 1, 1, 1,
	1, 1, 1, 16, 16, 15, 15, 15, 15, 15,
	15, 15, 14, 14, 14, 14, 14, 13, 13, 13,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	10, 10, 9, 9, 8, 8, 7, 7, 6, 6,
	6, 5, 5, 5, 5, 5, 4,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 4, 4, 3, 2, 2,
	0, 1, 3, 1, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 3, 1, 3, 3, 3, 3, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	3, 1, 5, 5, 5, 5, 1,
}

var yyChk = [...]int16{
	-1000, -21, -4, -5, -6, 2, -7, -8, -9, -10,
	-11, -12, -13, -14, -15, -16, -17, -18, 4, 5,
	-1, -20, 30, 31, 32, 33, 34, 35, -19, 25,
	27, 21, 19, 20, 23, 22, 15, 42, 31, 36,
	37, 32, 33, 18, 38, 39, 8, 9, 10, 11,
	12, 13, 42, 14, 16, 41, 40, 30, 10, 11,
	12, 13, 18, 38, 39, 8, 9, 6, 7, 32,
	33, 31, 36, 37, 17, 25, 27, 29, 4, 5,
	-17, -17, -17, -3, -4, -4, 2, -7, 2, -4,
	2, -16, -16, -16, -15, 2, -15, -13, 2, -13,
	-13, -13, -13, -12, 2, -12, -12, -12, 2, -4,
	-8, -7, -9, -10, -11, -12, -12, -12, -12, -13,
	-13, -13, -13, -13, -14, -14, -15, -15, -16, -16,
	-16, -16, -4, -2, -5, 23, 24, 26, 28, 28,
	43, 43, 43, 43, 26, 28, 24, -4, -5, -5,
	-5, -5, -5,
}

var yyDef = [...]int8{
	0, -2, 1, 86, 81, 0, 78, 76, 74, 72,
	70, 61, 50, 47, 42, 35, 33, 23, 0, 0,
	0, 14, 27, 28, 29, 30, 31, 32, 10, -2,
	0, 2, 3, 4, 5, 6, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 18, 19,
	24, 25, 26, 0, 8, 0, 0, 79, 0, 0,
	0, 39, 40, 41, 45, 0, 46, 56, 0, 57,
	58, 59, 60, 66, 0, 67, 68, 69, 0, 0,
	77, 80, 75, 73, 71, 62, 63, 64, 65, 51,
	52, 53, 54, 55, 48, 49, 43, 44, 36, 37,
	38, 34, 0, 0, 21, 17, 0, 11, 12, 13,
	0, 0, 0, 0, 15, 16, 0, 9, 82, 84,
	83, 85, 22,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 35, 3, 3, 3, 37, 30, 3,
	27, 28, 31, 32, 24, 33, 29, 36, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 43, 3,
	38, 3, 39, 42, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 25, 3, 26, 40, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 41, 3, 34,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:54
		{
			setScannerData(yylex, yyDollar[1].expr)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:58
		{
			yyVAL.expr = &ast.Primitive{Typ: ast.BOOLEAN, Value: yyDollar[1].b}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:59
		{
			yyVAL.expr = &ast.Primitive{Typ: ast.INT, Value: yyDollar[1].i}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:60
		{
			yyVAL.expr = &ast.Primitive{Typ: ast.FLOAT, Value: yyDollar[1].f}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:61
		{
			yyVAL.expr = &ast.Primitive{Typ: ast.IDENTIFIER, Value: yyDollar[1].s}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:62
		{
			yyVAL.expr = &ast.Primitive{Typ: ast.STRING, Value: yyDollar[1].s}
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:66
		{
			yyVAL.exprs = nil
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:67
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:68
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:72
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:73
		{
			yyVAL.expr = &ast.Primitive{Typ: ast.TUPLE, Value: yyDollar[2].exprs}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:74
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:75
		{
			yyVAL.expr = &ast.Primitive{Typ: ast.ERROR, Value: yyDollar[2].error}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:79
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:80
		{
			yyVAL.expr = &ast.Accessor{Typ: ast.MEMBER_ACCESSOR, Ancestor: yyDollar[1].expr, Ident: yyDollar[3].expr}
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:81
		{
			yyVAL.expr = &ast.ScalarFunction{Ident: yyDollar[1].expr, Args: yyDollar[3].exprs}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:82
		{
			yyVAL.expr = &ast.Accessor{Typ: ast.MEMBER_ACCESSOR, Ancestor: yyDollar[1].expr, Ident: &ast.Primitive{Typ: ast.IDENTIFIER, Value: yyDollar[3].s}}
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:83
		{
			yyVAL.expr = &ast.UnaryOperationExpr{Op: ast.POST_INC_OP, Child: yyDollar[1].expr}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:84
		{
			yyVAL.expr = &ast.UnaryOperationExpr{Op: ast.POST_DEC_OP, Child: yyDollar[1].expr}
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:88
		{
			yyVAL.exprs = nil
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:89
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:90
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:94
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:95
		{
			yyVAL.expr = &ast.UnaryOperationExpr{Op: ast.PRE_INC_OP, Child: yyDollar[2].expr}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:96
		{
			yyVAL.expr = &ast.UnaryOperationExpr{Op: ast.PRE_DEC_OP, Child: yyDollar[2].expr}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:97
		{
			yyVAL.expr = &ast.UnaryOperationExpr{Op: yyDollar[1].op, Child: yyDollar[2].expr}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:101
		{
			yyVAL.op = ast.UAND
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:102
		{
			yyVAL.op = ast.UMUL
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:103
		{
			yyVAL.op = ast.UPLUS
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:104
		{
			yyVAL.op = ast.UMINUS
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:105
		{
			yyVAL.op = ast.UBITNOT
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:106
		{
			yyVAL.op = ast.UNOT
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:110
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:111
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.POW, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:116
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.MUL, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:117
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.DIV, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:118
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.MOD, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:119
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.MUL, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:120
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.DIV, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:121
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.MOD, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:125
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:126
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.ADD, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:127
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.SUB, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:128
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.ADD, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:129
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.SUB, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:133
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:134
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.LEFT_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:135
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.RIGHT_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:140
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.IN_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:141
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.LT, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:142
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.GT, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:143
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.LE, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:144
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.GE, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:145
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.IN_OP, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:146
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.LT, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:147
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.GT, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:148
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.LE, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:149
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.GE, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:153
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:154
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.EQ_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:155
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.NE_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:156
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.RE_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:157
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.NR_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:158
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.EQ_OP, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:159
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.NE_OP, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:160
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.RE_OP, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:161
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.NR_OP, L: yyDollar[1].error, R: yyDollar[3].expr}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:166
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.AND, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:170
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:171
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.EX_OR, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:175
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:176
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.IN_OR, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:180
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:181
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.AND_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:185
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:186
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.OR_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			yyVAL.expr = &ast.BinaryOperationExpr{Op: ast.NULL_OP, L: yyDollar[1].expr, R: yyDollar[3].expr}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:191
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:192
		{
			yyVAL.expr = &ast.TernaryOperationExpr{Cond: yyDollar[1].expr, True: yyDollar[3].expr, False: yyDollar[5].expr}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:193
		{
			yyVAL.expr = &ast.TernaryOperationExpr{Cond: yyDollar[1].error, True: yyDollar[3].error, False: yyDollar[5].expr}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:194
		{
			yyVAL.expr = &ast.TernaryOperationExpr{Cond: yyDollar[1].expr, True: yyDollar[3].error, False: yyDollar[5].expr}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:195
		{
			yyVAL.expr = &ast.TernaryOperationExpr{Cond: yyDollar[1].error, True: yyDollar[3].expr, False: yyDollar[5].expr}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:199
		{
			yyVAL.expr = yyDollar[1].expr
		}
	}
	goto yystack /* stack new state and value */
}
