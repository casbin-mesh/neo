// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/casbin-mesh/neo/pkg/parser/ast"
)

func setScannerData(yylex interface{}, data interface{}) {
	yylex.(*Lexer).parseResult = data
}

//line parser.y:13
type yySymType struct {
	yys int
	i   int
	f   float64
	b   bool
	s   string
	op  ast.Op
	ex  interface{}
	t   []*ast.Primitive
	p   *ast.Primitive
}

const OB = 57346
const CB = 57347
const BETWEEN = 57348
const AND_AND = 57349
const OR_OR = 57350
const OP = 57351
const CP = 57352
const ADD = 57353
const SUB = 57354
const MUL = 57355
const MOD = 57356
const DIV = 57357
const AND = 57358
const OR = 57359
const XOR = 57360
const RSHIFT = 57361
const LSHIFT = 57362
const SEPARATOR = 57363
const NULL_COALESCENCE = 57364
const POW = 57365
const BOOL_NOT = 57366
const UMINUS = 57367
const INT = 57368
const FLOAT = 57369
const BOOL = 57370
const STRING = 57371
const IDENT = 57372
const TERNARY_TRUE = 57373
const TERNARY_FALSE = 57374
const BIT_OR = 57375
const BIT_XOR = 57376
const BIT_AND = 57377
const EQ = 57378
const NE = 57379
const RE = 57380
const NRE = 57381
const GT = 57382
const GTE = 57383
const LT = 57384
const LTE = 57385
const BIT_NOT = 57386

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"OB",
	"CB",
	"BETWEEN",
	"AND_AND",
	"OR_OR",
	"OP",
	"CP",
	"ADD",
	"SUB",
	"MUL",
	"MOD",
	"DIV",
	"AND",
	"OR",
	"XOR",
	"RSHIFT",
	"LSHIFT",
	"SEPARATOR",
	"NULL_COALESCENCE",
	"POW",
	"BOOL_NOT",
	"UMINUS",
	"\"-\"",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"IDENT",
	"TERNARY_TRUE",
	"TERNARY_FALSE",
	"BIT_OR",
	"BIT_XOR",
	"BIT_AND",
	"EQ",
	"NE",
	"RE",
	"NRE",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"BIT_NOT",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:108

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 219

var yyAct = [...]int8{
	2, 37, 38, 13, 69, 3, 32, 68, 67, 66,
	41, 31, 20, 34, 39, 40, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 62, 6, 30, 28, 29, 61, 64, 15, 16,
	17, 19, 18, 35, 36, 65, 73, 42, 33, 14,
	20, 74, 1, 31, 15, 16, 17, 19, 18, 21,
	72, 0, 70, 0, 22, 23, 20, 42, 24, 25,
	26, 27, 0, 76, 28, 29, 0, 63, 15, 16,
	17, 19, 18, 0, 24, 25, 26, 27, 0, 0,
	20, 17, 19, 18, 15, 16, 17, 19, 18, 21,
	0, 20, 0, 75, 22, 23, 20, 71, 24, 25,
	26, 27, 28, 29, 0, 0, 15, 16, 17, 19,
	18, 0, 0, 70, 0, 28, 0, 0, 20, 15,
	16, 17, 19, 18, 0, 0, 0, 21, 0, 0,
	0, 20, 22, 23, 0, 0, 24, 25, 26, 27,
	0, 0, 0, 0, 0, 22, 23, 0, 0, 24,
	25, 26, 27, 15, 16, 17, 19, 18, 0, 0,
	0, 0, 0, 0, 0, 20, 0, 14, 0, 0,
	0, 0, 5, 0, 0, 11, 0, 0, 0, 22,
	23, 14, 0, 24, 25, 26, 27, 4, 0, 11,
	9, 10, 12, 8, 7, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 9, 10, 12, 44, 45,
}

var yyPact = [...]int16{
	173, -1000, 105, -1000, 24, 173, 42, 4, -38, -1000,
	-1000, -13, -1000, -1000, 187, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, -1000, 67, 45, 187, -21, -22, -23, -26, -1000,
	-1000, 102, -1000, -18, -1000, -1000, 78, 78, -11, -11,
	-11, -11, 27, 43, 43, 83, 83, 83, 83, 152,
	118, 36, 105, -1000, -1000, 41, -1000, -1000, -1000, -1000,
	187, -1000, 173, -1000, -1000, -1000, 105,
}

var yyPgo = [...]int8{
	0, 0, 5, 32, 3, 10, 52,
}

var yyR1 = [...]int8{
	0, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 5, 5, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3,
}

var yyR2 = [...]int8{
	0, 1, 1, 4, 3, 3, 3, 3, 3, 3,
	3, 1, 3, 4, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 3,
	1, 1, 2, 2, 1, 2, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -6, -1, -2, 24, 9, -3, 31, 30, 27,
	28, 12, 29, -4, 4, 11, 12, 13, 15, 14,
	23, 32, 37, 38, 41, 42, 43, 44, 7, 8,
	9, 29, -1, 6, 9, 39, 40, 39, 40, 27,
	28, -5, -3, 24, 30, 31, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -2, -1, 10, -4, -5, 30, 30, 30, 30,
	21, 5, 33, 10, 10, -3, -1,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 0, 0, 11, 37, 36, 30,
	31, 0, 34, 38, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 32,
	33, 0, 27, 0, 36, 37, 4, 5, 6, 7,
	8, 9, 0, 15, 16, 17, 18, 19, 20, 21,
	22, 2, 0, 10, 12, 0, 24, 26, 23, 25,
	0, 29, 0, 3, 13, 28, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 26,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:53
		{
			setScannerData(yylex, yyDollar[1].ex)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:57
		{
			yyVAL.ex = yyDollar[1].ex
		}
	case 3:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:58
		{
			yyVAL.ex = &ast.UnaryOperationExpr{Op: ast.BOOL_NOT, Child: yyDollar[3].ex}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:59
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.ADD, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:60
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.SUB, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:61
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.MUL, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:62
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.DIV, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:63
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.MOD, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:64
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.POW, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:65
		{
			yyVAL.ex = yyDollar[2].ex
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:66
		{
			yyVAL.ex = yyDollar[1].p
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:67
		{
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:68
		{
			yyVAL.ex = &ast.ScalarFunction{Ident: yyDollar[1].s, Args: yyDollar[3].t}
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:69
		{
			yyVAL.ex = &ast.TernaryOperationExpr{Cond: yyDollar[1].ex, True: yyDollar[3].ex, False: yyDollar[5].ex}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:73
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.EQ, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:74
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.NE, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:75
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.GT, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:76
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.GTE, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:77
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.LT, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:78
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.LTE, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:79
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.AND_AND, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:80
		{
			yyVAL.ex = &ast.BinaryOperationExpr{Op: ast.OR_OR, L: yyDollar[1].ex, R: yyDollar[3].ex}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:81
		{
			yyVAL.ex = &ast.RegexOperationExpr{Typ: ast.RE, Pattern: yyDollar[1].s, Target: yyDollar[3].s}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:82
		{
			yyVAL.ex = &ast.RegexOperationExpr{Typ: ast.RE, Pattern: yyDollar[1].s, Target: yyDollar[3].s}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:83
		{
			yyVAL.ex = &ast.RegexOperationExpr{Typ: ast.NRE, Pattern: yyDollar[1].s, Target: yyDollar[3].s}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:84
		{
			yyVAL.ex = &ast.RegexOperationExpr{Typ: ast.NRE, Pattern: yyDollar[1].s, Target: yyDollar[3].s}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:88
		{
			yyVAL.t = append([]*ast.Primitive{}, yyDollar[1].p)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:89
		{
			yyVAL.t = append(yyDollar[1].t, yyDollar[3].p)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:93
		{
			yyVAL.p = &ast.Primitive{Typ: ast.TUPLE, Value: yyDollar[2].t}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:97
		{
			yyVAL.p = &ast.Primitive{Typ: ast.INT, Value: yyDollar[1].i}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:98
		{
			yyVAL.p = &ast.Primitive{Typ: ast.FLOAT64, Value: yyDollar[1].f}
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:99
		{
			yyVAL.p = &ast.Primitive{Typ: ast.INT, Value: -yyDollar[2].i}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:100
		{
			yyVAL.p = &ast.Primitive{Typ: ast.FLOAT64, Value: -yyDollar[2].f}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:101
		{
			yyVAL.p = &ast.Primitive{Typ: ast.BOOL, Value: yyDollar[1].b}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:102
		{
			yyVAL.p = &ast.Primitive{Typ: ast.BOOL, Value: !yyDollar[2].b}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:103
		{
			yyVAL.p = &ast.Primitive{Typ: ast.STRING, Value: ast.RemoveStringQuote(yyDollar[1].s)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:104
		{
			yyVAL.p = &ast.Primitive{Typ: ast.VARIABLE, Value: yyDollar[1].s}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:105
		{
			yyVAL.p = yyDollar[1].p
		}
	}
	goto yystack /* stack new state and value */
}
