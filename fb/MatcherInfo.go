// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MatcherInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsMatcherInfo(buf []byte, offset flatbuffers.UOffsetT) *MatcherInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MatcherInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMatcherInfo(buf []byte, offset flatbuffers.UOffsetT) *MatcherInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MatcherInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MatcherInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MatcherInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MatcherInfo) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MatcherInfo) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *MatcherInfo) Name(obj *CIStr) *CIStr {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CIStr)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MatcherInfo) Raw() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MatcherInfo) PolicyEffect() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MatcherInfo) MutatePolicyEffect(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func MatcherInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MatcherInfoAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func MatcherInfoAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func MatcherInfoAddRaw(builder *flatbuffers.Builder, raw flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(raw), 0)
}
func MatcherInfoAddPolicyEffect(builder *flatbuffers.Builder, policyEffect byte) {
	builder.PrependByteSlot(3, policyEffect, 0)
}
func MatcherInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
