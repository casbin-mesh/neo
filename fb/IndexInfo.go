// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IndexInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsIndexInfo(buf []byte, offset flatbuffers.UOffsetT) *IndexInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IndexInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsIndexInfo(buf []byte, offset flatbuffers.UOffsetT) *IndexInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IndexInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *IndexInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IndexInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IndexInfo) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IndexInfo) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *IndexInfo) Name(obj *CIStr) *CIStr {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CIStr)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *IndexInfo) TableName(obj *CIStr) *CIStr {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CIStr)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *IndexInfo) Columns(obj *IndexColumn, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *IndexInfo) ColumnsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *IndexInfo) Unique() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *IndexInfo) MutateUnique(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *IndexInfo) Primary() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *IndexInfo) MutatePrimary(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *IndexInfo) Tp() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IndexInfo) MutateTp(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func IndexInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func IndexInfoAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func IndexInfoAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func IndexInfoAddTableName(builder *flatbuffers.Builder, tableName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(tableName), 0)
}
func IndexInfoAddColumns(builder *flatbuffers.Builder, columns flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(columns), 0)
}
func IndexInfoStartColumnsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IndexInfoAddUnique(builder *flatbuffers.Builder, unique bool) {
	builder.PrependBoolSlot(4, unique, false)
}
func IndexInfoAddPrimary(builder *flatbuffers.Builder, primary bool) {
	builder.PrependBoolSlot(5, primary, false)
}
func IndexInfoAddTp(builder *flatbuffers.Builder, tp byte) {
	builder.PrependByteSlot(6, tp, 0)
}
func IndexInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
